name: Release

on:
  release:
    types:
      - published

jobs:
  publish:
    name: Publish for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write

    strategy:
      # Set fail-fast to false in order to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following configurations:
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: cl
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: clang
        exclude:
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ github.workspace }}/build
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ github.workspace }}/build --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ github.workspace }}/build
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Package (Linux, portable)
      if: runner.os == 'Linux'
      run: |
        cmake --install build --prefix ./
        mkdir output
        rsync -av --exclude='*.txt' --exclude='*.cmake' --exclude='Makefile' --exclude='CMakeFiles/' --exclude='Testing/' build/ output/
        chmod +x output/*
        cp -r include/* output/
        cd output
        7z a -mm=Deflate -mfb=128 -mpass=10 -mx=8 -tzip package.zip .
        cd ..

    - name: Package (Windows, portable)
      if: runner.os == 'Windows'
      run: |
        cmake --install build --prefix ./
        mkdir output
        move build/Release/*.exe output/
        xcopy /S /I /E include output\
        cd output
        7z a -mm=Deflate -mfb=128 -mpass=10 -mx=8 -tzip package.zip .
        cd ..

    - name: Upload to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        asset_name: ${{ github.event.repository.name }}_v$tag-${{ runner.os }}-${{ matrix.c_compiler }}-portable.zip
        file: output/package.zip
        tag: ${{ github.ref }}
